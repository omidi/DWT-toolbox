Dinucleotide Weight Tensors: Automated Incorporation of Pairwise Dependency 
within Transcription Factor Binding Sites
********************************************************************

CONTENTS:

0. Prerequisites of running 'diLogo.py'
1. Input files and their format
   1.1 DWT flat file (-i)
       1.1.1 Where to find DWT flat files
   1.2 Posterior of positional dependency (-p)
   1.3 Optional posterior cutoff (-c)
2. Output file
3. Generating DWT flat files from a set of k-mers
4. Contact and credits.

*********************************************************************


0. Prerequisites of running 'diLogo.py'
Before running the diLogo.py script, it is required that the following 
programs or libraries are being installed:
       - Python 2.7
       - Pip (Python Package Management system)

After having these programs installed, Pip can be used to install a 
compatible version (0.12.1) of the Pyx library. Pyx is a graphical
library for working with SVG, PDF and PostScript files. To install 
the Pyx library, run the following command in the command line:

pip install pyx==0.12.1

In addition to Pyx library, it is also required to install 'argparse' library.

pip install argparse



1. Input files and their format
In this section we describe the input parameters (arguments) that are needed for
generating diLogos using diLogo.py script. Below shows an example of how to run 
the program:

/usr/local/bin/python diLogo.py  --help 

By running this code, information about the input arguments will be appeared in 
the screen. This includes: mandatory option -i for the input DWT flat file,
a mandatory option -p that contains the posteriors of dependencies between all 
pairs of positions, an optional cutoff value over the posterior probabilities. 

We now explain each of these input parameters, with the same order. 



1.1. DWT flat file (-i)
The DWT flat file encodes the binding specificity of a TF under the DWT model. It
serves the same purpose as the normal WM (PSWM) file, but includes more information
about the probability (or frequency) of dinucleotides at each pairs of positions
within TF binding sites.

Below, we show an example of a DWT flat file:

NA      CTCF
PO1     PO2     AA      AC      AG      AT      CA      CC      CG      CT      GA      GC      GG      GT      TA      TC      TG      TT
1       2       7.298   6.697   27.338  8.731   33.412  47.014  32.665  74.817  25.663  127.465 16.158  35.156  5.769   22.555  76.793  16.962
1       3       5.896   3.297   34.569  6.303   30.592  10.88   128.906 17.53   34.24   11.353  133.234 25.614  22.971  9.993   72.814  16.301
1       4       9.162   32.8    3.443   4.66    9.008   162.259 9.636   7.005   9.189   171.349 12.724  11.179  4.668   103.097 5.409   8.904
1       5       0.978   49.086  0.0     0.0     2.766   181.392 0.894   2.856   4.285   191.227 2.714   6.215   1.651   119.473 0.956   0.0
1       6       28.889  9.058   8.247   3.871   86.045  42.738  31.844  27.282  79.949  85.394  24.955  14.143  90.75   6.273   11.548  13.508
1       7       0.982   32.987  11.66   4.435   6.433   111.387 32.628  37.461  2.428   128.432 25.786  47.795  2.973   75.859  33.547  9.7
1       8       5.349   30.795  6.829   7.091   12.72   140.802 6.945   27.441  3.517   184.98  2.553   13.391  13.851  75.203  1.99    31.036
1       9       32.145  3.756   4.257   9.906   105.614 4.9     5.588   71.806  62.044  0.0     1.825   140.573 90.557  6.411   9.253   15.858
1       10      4.347   0.96    41.765  2.993   16.175  3.973   160.004 7.757   30.867  4.948   156.777 11.848  8.127   2.634   110.505 0.813
1       11      12.153  5.595   30.478  1.838   42.804  34.32   108.901 1.884   19.485  56.544  122.608 5.804   42.443  11.659  67.08   0.898
1       12      6.931   1.252   19.651  22.231  22.838  20.262  65.644  79.164  30.575  23.224  28.882  121.759 14.724  9.482   52.848  45.025
1       13      0.0     0.0     49.09   0.974   3.959   0.984   181.055 1.911   2.12    0.0     201.63  0.691   4.542   0.71    116.827 0.0
1       14      0.0     3.922   44.171  1.97    5.694   12.446  163.381 6.388   7.921   10.199  174.471 11.85   11.415  5.718   101.964 2.982
1       15      4.604   34.687  1.445   9.328   17.777  128.456 9.394   32.281  27.489  128.065 10.184  38.703  10.896  87.842  2.504   20.837
1       16      13.263  6.624   25.482  4.696   48.456  34.617  83.342  21.494  35.184  64.533  73.235  31.488  45.935  10.594  55.67   9.88
1       17      5.814   29.259  12.264  2.728   32.597  86.941  59.262  9.109   50.998  57.05   73.721  22.672  9.807   65.205  42.584  4.483
1       18      1.984   16.306  7.949   23.826  28.228  82.675  18.269  58.737  24.722  67.054  50.55   62.114  13.52   56.546  8.132   43.881
1       19      16.3    18.786  10.468  4.51    58.719  51.556  50.128  27.505  67.778  48.922  61.36   26.38   46.461  25.505  46.266  3.847
1       20      19.031  8.518   13.197  9.319   32.509  48.132  64.849  42.418  55.561  39.939  83.605  25.335  16.286  33.985  42.554  29.254
2       3       20.282  2.336   40.318  9.206   34.843  9.54    127.182 32.167  26.217  16.338  94.81   15.588  12.356  7.31    107.214 8.786
2       4       1.667   57.328  6.931   6.216   4.462   177.679 10.893  10.698  14.289  125.35  6.907   6.407   11.609  109.149 6.481   8.427
...


Where the first line contains the name of TF, in above example we are showing the 
DWT flat file for CTCF. Second line serves as a header, with the 1st position and 
2nd position, followed by 16 possible dinucleotides. 
NOTE: the order of the dinucleotides in the second file must be kept the same as
above. 

Next lines, show the dinucleotide frequencies at each pairs of positions. For instance,
the third line shows the dinculeotides frequencies at position 1 and 2. There are in
total N*(N-1)/2 lines that encode the dinucleotide frequencies at each pairs of position
for a binding site of length N. For instance, for CTCF, which the length of site is 20,
there are 190 lines in the DWT flat file.

For generating a DWT flat file, from a set of aligned sequences see 'generate_DWT_model.py' 
in the current directory or section 3 of the current manual.



1.1.1. Where to find DWT flat files
We have made DWT flat files for 78 human TFs, which can be found at: 
http://crunch.unibas.ch/DWT/table.html 

In addition to the DWT flat files, one can obtain the diLogo (generated from the DWT 
flat files), WM logos and enrichment scores for each of the models (see the DWT paper).



1.2 Posterior of positional dependency (-p)
This file contains the posterior of positional dependency between every pairs of positions.
The format of the file is similar to the following example, which shows the posteriors of
dependencies within the CTCF binding sites:

0     1   0.9671
0     2   0.0089
1     2   0.0347
0     3   0.0498
1     3   0.0493
2     3   0.0535
0     4   0.0268
1     4   0.0223
2     4   0.0991
3     4   0.1046
...

The first two columns indicate the pairs of the positions, regardless of their order (dependency
is not directional). The last column is the posterior probability of the positional dependency
between the  positions. For instance, positions (0,1) are highly dependent with a posterior 0.9671,
and positions (2,4) are most likely independent from each other with a posterior of 0.0991.

For generating this file, check out '../Positional_Dependency_Posterior' directory 
that contains a C++ implementation for calculating the posteriors of dependency.



1.3 Optional posterior cutoff (-c)
This is an optional argument that is a cutoff value in a range of [0,1]. If not provided, 
by default a cutoff of 0.9 is used. The usage of this paramter is in identifying dependent 
positions: if the posterior of dependency between two position is bigger that the cutoff 
the two positions are taken as dependent. As a result, their dinucleotides will be presented
in the final diLogo. 



2. Output file
As an output, this script generates a PDF file in the current working directory with the same 
name as the TF name (as given by the DWT flat file). The PDF file, contains the diLogo for the TF. 



3. Generating DWT flat file from a set of k-mers
A Python script is provided that generates a DWT flat file from a set of k-mers. The script 
is called 'generate_DWT_model.py' and can be found in the current directory. It is required
to install first Numpy, if it is not already installed. To install the Numpy library, simply
run:

pip install numpy 

After Numpy has been successfully installed, the script for generating DWT flat files can be
run as it is shown bellow: 

/usr/local/bin/python generate_DWT_model.py  --help  

This provides a description of how to run the script. Input file, given by -i option, is a 
file that contains a set of k-mers at each line. Optionally, these k-mers can have a weight
value in the second column. But if weights are not given, they will all get the same weight 1.
Bellow shows an example of such file: 

GCGCCACCTGCAGGCCAAGG    0.9997
TGGCCTGCAGGTGGCGCTGT    0.9999
GCACCACCTGCAGGCCAAGG    0.9989
CTGCCAGCAGATGGCGACAG    0.9996
TCGCCATCTGCTGGCAGCGC    0.9992
AGCGCACTGGCAGCCAGCAA    0.8333
CTGCCCTCTGGTGGCCGTAG    0.9999
CGGCCACCAGAGGGCAGTGT    1.0000
AGGCCATCTACAGGACTGCA    0.8264
CTGTCATCTACAGGCCATCT    0.9987
TGGCCTGTAGATGACAGCAG    0.9975
ATGACAGCAGAGGCCCATGC    0.5869
GTGCCACCTGGTGAATGACT    0.9934
CATTCACCAGGTGGCACCAC    0.9972
CGGCCACTGGGAGGCGCTGC    0.9997
...

A set of 20-mers are given that each has a different weight. When running the script over a set 
of k-mers, a DWT flat file will be printed out in the screen. The output can be re-directed to 
another file. See 'Examples' directory to find examples on running the script.



4. Contact and credits 
The DWT model is developed in C++ by Saeed Omidi and Erik van Nimwegen.
For citing our work, please check out our website: 
http://nimwegenlab.org/

Source code repository: 
https://github.com/omidi/DWT-model

email address:
saeed.omidi@gmail.com
erik.vannimwegen@unibas.ch

connecting to us on Twitter: 
@NimwegenLab
@SaeedOmidi

Physical address:
Core program Computational and Systems Biology
Biozentrum, University of Basel
Klingelbergstrasse 50-70
4056 Basel, Switzerland


