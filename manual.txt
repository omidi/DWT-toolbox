Dinucleotide Weight Tensors: Automated Incorporation of Pairwise Dependency within Transcription Factor Binding Sites
********************************************************************

CONTENTS:

1. Compiling the source codes
2. Input/Output for TFBS prediction
   2.1 DWT flat file
       2.1.1 Where to find DWT flat files
   2.2 DNA FASTA file
   2.3 Parameter file
   2.4 Output file
3. Input/Output for calculating posterior of dependency
   3.1 Posterior of dependency output
4. Prerequisites for running 'diLogo.py'
   4.1. Input files and their format
   4.2. Output of 'diLogo.py'
5. Generating DWT flat file from a set of k-mers
6. Fitting a DWT model from an initial PSWM model
   6.1. Prerequisites for running 'fitting_DWT_model.py'
        6.1.1. Installing MotEvo
   6.2. Running fitting_DWT_model.py
        6.2.1. PSWM format
        6.2.2. DNA FASTA file
        6.2.3. Other input arguments
   6.3. Output files
7. Contact and credits.

*********************************************************************


1. Compiling the source codes
Under Linux, you can use the provided Makefile to compile the source codes that are to be found in the Source directory.
This can be done by going to the Source directory and execute the following command:

make all

The above command, first, uncompress boost_1_41_0.tar.gz. In the implementation of the DWT model, we have used the boost
library. Afterwards, it produces the object files and finally the executables. The executable for the TFBS prediction is
called 'DWT_TFBS_prediction'. Another program, which is called 'positional_dependency_posterior', is for calculating the
posterior of positional dependency between pairs of positions within the TFBS. In addition, the Makefile compiles MotEvo
(version 1.03) which is used in fitting the DWT model to a set of DNA sequences and initial weight matrix model.

If it is preferred to compile the program manually, first it is required to uncompress  'boost_1_41_0.tar.gz'. This task
is done by executing the following command in the terminal:

tar -xvf boost_1_41_0.tar.gz

Afterwards, the program for the TFBS prediction can be compiled by the following commands:

g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Score.o Score.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Alignment.o Alignment.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o BackgroundModel.o BackgroundModel.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o constants.o constants.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Decomposition.o Decomposition.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Motif.o Motif.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Window.o Window.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o ParameterFile.o ParameterFile.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o DWT_model.o DWT_model.cpp

Following that, you can issue the following command to make the executable for the DWT model:

g++ -Wall -g3 -O3 Score.o Alignment.o BackgroundModel.o \
constants.o Decomposition.o Motif.o \
Window.o ParameterFile.o DWT_model.o  \
-o DWT_TFBS_prediction

This command produce a binary file named "DWT_TFBS_prediction" which is  the executable for running  the DWT model. Also
note that, after running this command,  the object files (finished with .o) are not necessary, hence can be removed from
the directory by:

rm *.o

This should also work under Mac OS. Second note: we use the GNU C++ compiler g++. You can of course use another C++ com-
piler. Under Windows you will need to know how to compile C++ source code yourself.


Similarly for  manually compiling the  source code for posterior of positional dependency, the following commands can be
executed in the 'Source' directory:

g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Score.o Score.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Alignment.o Alignment.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o BackgroundModel.o BackgroundModel.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o constants.o constants.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Decomposition.o Decomposition.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Motif.o Motif.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Window.o Window.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o ParameterFile.o ParameterFile.cpp
g++ -c -Wall -g3 -O3 -I boost_1_41_0/ -o Positional_Dependency_Posterior.o Positional_Dependency_Posterior.cpp

Following that, you can issue the following command to make the executable for the program:

g++ -Wall -g3 -O3 Score.o Alignment.o BackgroundModel.o constants.o \
    Decomposition.o Motif.o Window.o ParameterFile.o \
    Positional_Dependency_Posterior.o -o positional_dependency_posterior

This command will produce the executable 'positional_dependency_posterior' which is for calculating the posterior of po-
sitional dependency between pairs of binding positions.



1. Input/Output for TFBS prediction
In this section we describe  the input parameters (i.e., arguments) that are needed for running the DWT_TFBS_prediction.
Below shows an example of how to run the program:

/Source/DWT_TFBS_prediction CTCF.dwt sequences.fasta param_file.txt

We now explain each of these input parameters, with the same order.


2.1. DWT flat file
The DWT flat  file encodes the binding specificity of a TF under the DWT model. It serves the same purpose as the normal
WM (PSWM) file, but includes more information about the probability (or frequency) of dinucleotides at each pairs of po-
sitions within TFBS.

Below, we show an example of a DWT flat file:

NA      CTCF
PO1     PO2     AA      AC      AG      AT      CA      CC      CG      CT      GA      GC      GG      GT      TA      TC      TG      TT
1       2       7.298   6.697   27.338  8.731   33.412  47.014  32.665  74.817  25.663  127.465 16.158  35.156  5.769   22.555  76.793  16.962
1       3       5.896   3.297   34.569  6.303   30.592  10.88   128.906 17.53   34.24   11.353  133.234 25.614  22.971  9.993   72.814  16.301
1       4       9.162   32.8    3.443   4.66    9.008   162.259 9.636   7.005   9.189   171.349 12.724  11.179  4.668   103.097 5.409   8.904
1       5       0.978   49.086  0.0     0.0     2.766   181.392 0.894   2.856   4.285   191.227 2.714   6.215   1.651   119.473 0.956   0.0
1       6       28.889  9.058   8.247   3.871   86.045  42.738  31.844  27.282  79.949  85.394  24.955  14.143  90.75   6.273   11.548  13.508
1       7       0.982   32.987  11.66   4.435   6.433   111.387 32.628  37.461  2.428   128.432 25.786  47.795  2.973   75.859  33.547  9.7
1       8       5.349   30.795  6.829   7.091   12.72   140.802 6.945   27.441  3.517   184.98  2.553   13.391  13.851  75.203  1.99    31.036
1       9       32.145  3.756   4.257   9.906   105.614 4.9     5.588   71.806  62.044  0.0     1.825   140.573 90.557  6.411   9.253   15.858
1       10      4.347   0.96    41.765  2.993   16.175  3.973   160.004 7.757   30.867  4.948   156.777 11.848  8.127   2.634   110.505 0.813
1       11      12.153  5.595   30.478  1.838   42.804  34.32   108.901 1.884   19.485  56.544  122.608 5.804   42.443  11.659  67.08   0.898
1       12      6.931   1.252   19.651  22.231  22.838  20.262  65.644  79.164  30.575  23.224  28.882  121.759 14.724  9.482   52.848  45.025
1       13      0.0     0.0     49.09   0.974   3.959   0.984   181.055 1.911   2.12    0.0     201.63  0.691   4.542   0.71    116.827 0.0
1       14      0.0     3.922   44.171  1.97    5.694   12.446  163.381 6.388   7.921   10.199  174.471 11.85   11.415  5.718   101.964 2.982
1       15      4.604   34.687  1.445   9.328   17.777  128.456 9.394   32.281  27.489  128.065 10.184  38.703  10.896  87.842  2.504   20.837
1       16      13.263  6.624   25.482  4.696   48.456  34.617  83.342  21.494  35.184  64.533  73.235  31.488  45.935  10.594  55.67   9.88
1       17      5.814   29.259  12.264  2.728   32.597  86.941  59.262  9.109   50.998  57.05   73.721  22.672  9.807   65.205  42.584  4.483
1       18      1.984   16.306  7.949   23.826  28.228  82.675  18.269  58.737  24.722  67.054  50.55   62.114  13.52   56.546  8.132   43.881
1       19      16.3    18.786  10.468  4.51    58.719  51.556  50.128  27.505  67.778  48.922  61.36   26.38   46.461  25.505  46.266  3.847
1       20      19.031  8.518   13.197  9.319   32.509  48.132  64.849  42.418  55.561  39.939  83.605  25.335  16.286  33.985  42.554  29.254
2       3       20.282  2.336   40.318  9.206   34.843  9.54    127.182 32.167  26.217  16.338  94.81   15.588  12.356  7.31    107.214 8.786
2       4       1.667   57.328  6.931   6.216   4.462   177.679 10.893  10.698  14.289  125.35  6.907   6.407   11.609  109.149 6.481   8.427
...

where the first line contains the name of the TF, in above example we are showing the DWT flat file for CTCF. Second li-
ne serves as a header, with the first position and the second position, followed by 16 possible dinucleotides.

NOTE: the order of the dinucleotides in the second file must be always kept as above.

Next lines, show the dinucleotide frequencies at each pairs of positions. For instance, the third line shows the dincul-
eotides frequencies at position 1 and 2. There are in  total N*(N-1)/2 lines that encode the dinucleotide frequencies at
each pairs of position for a binding site of length N. For instance, for CTCF, which the length of site is 20, there are
190 lines in the DWT flat file.

For generating a DWT flat file, from a set of aligned sequences see 'generate_DWT_model.py' in the 'Source' directory or
see section '5. Generating DWT flat file from a set of k-mers' of the current manual.


2.1.1. Where to find DWT flat files
We have made DWT flat files for 78 human TFs, which can be found at: http://crunch.unibas.ch/DWT/table.html
In addition, we are providing the diLogos, WM logos and enrichment scores for each of the models (see the DWT paper).
Moreover, a set of 78 DWT flat files can be found in the 'DWT_models' directory.


2.2. DNA FASTA file
The DNA FASTA provides the program with the set of DNA sequences that will be searched for TFBS. Bellow shows an example
of a FASTA file:

>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+
TCAAACACTATGTTTAGTGTGTTTGTTTTTTTAGAAGGTACTTTCCCATATGACTAAGAGAATGAAATCAGCCAGTGAAAATAACTGCAAATGAGCC
>hg19_chr14_68742559_68742620_reg1000593.p3.rep2_16.3893413174_+
CCTTGAATTCTCAGCTGACATGTTATTTCTATTTTTTTGTCCTTACTGCAAGAACCTGTCCT
>hg19_chr2_70369921_70370101_reg1000153.p3_39.9191521197_+
GGCTGCGCAGGAGGCATTGGCAACTGAGCGTCCTGCGGCGCCGCCTGGTGGAAGCAAAGCAGCCGAGCCCCCCGGAAGCGGCGGCGCGGGCGAGTGGAGAACGTGACTTACGTCATCTGG
CGGAGGCGTGGGGGCGGCTGCCGCGTGACCAGCCCCAGCCAGGCGCGGTCGGCGCGTTTCT
...


Here, the DNA sequences must be gap-less. If one or more of letter 'N' is inside the sequence, the program will skip all
sites that are overlapping the 'N' letter(s). Finally, Note that the DNA sequences in the FASTA file need to be given as
a whole, not several lines separated with '\n' (new line) or white space characters. To see more examples, check out the
'Examples/TFBS_prediction' directory.


2.3 Parameter file
Input parameter file which sets parameters for the DWT program. The name of each parameter is preceded by '#' character.
Example bellow demonstrates the content of a parameter file:


#background
A       0.25
C       0.25
G       0.25
T       0.25

#output_file
results.txt


The 'background' parameter specifies the background nucleotide probabilities, independent of their position. This is us-
ed to calculate the likelihood of each binding site under the background model.  In above, a uniform background is given
(each nucleotide is equally likely),  but based on the usage, user can change the background frequencies.  However, user
needs to make sure that the probabilities are normalized (sum of them is equal to 1).
The output_file option, provides the name of the output file where the results of DWT program will be copied in.  If the
file is already exist, the content will be re-written, otherwise a new file with the 'results.txt' will be created.


2.4 Output file
The output file, after running the DWT program, will contain following information:

>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     0       20      +       CTCF    CCTTGAATTCTCAGCTGACA    -15.9948
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     0       20      -       CTCF    TGTCAGCTGAGAATTCAAGG    -4.6522
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     1       21      +       CTCF    CTTGAATTCTCAGCTGACAT    -12.3138
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     1       21      -       CTCF    ATGTCAGCTGAGAATTCAAG    -3.8257
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     2       22      +       CTCF    TTGAATTCTCAGCTGACATG    -13.3190
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     2       22      -       CTCF    CATGTCAGCTGAGAATTCAA    -14.4652
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     3       23      +       CTCF    TGAATTCTCAGCTGACATGT    -8.0776
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     3       23      -       CTCF    ACATGTCAGCTGAGAATTCA    -15.9692
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     4       24      +       CTCF    GAATTCTCAGCTGACATGTT    -5.8385
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     4       24      -       CTCF    AACATGTCAGCTGAGAATTC    -7.8037
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     5       25      +       CTCF    AATTCTCAGCTGACATGTTA    -14.4202
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     5       25      -       CTCF    TAACATGTCAGCTGAGAATT    -14.3011
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     6       26      +       CTCF    ATTCTCAGCTGACATGTTAT    -19.2765
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     6       26      -       CTCF    ATAACATGTCAGCTGAGAAT    -15.2481
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     7       27      +       CTCF    TTCTCAGCTGACATGTTATT    -13.0199
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     7       27      -       CTCF    AATAACATGTCAGCTGAGAA    -11.8477
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     8       28      +       CTCF    TCTCAGCTGACATGTTATTT    -6.9871
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     8       28      -       CTCF    AAATAACATGTCAGCTGAGA    -11.9803
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     9       29      +       CTCF    CTCAGCTGACATGTTATTTC    -15.7468
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     9       29      -       CTCF    GAAATAACATGTCAGCTGAG    -13.5692
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     10      30      +       CTCF    TCAGCTGACATGTTATTTCT    -12.8781
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     10      30      -       CTCF    AGAAATAACATGTCAGCTGA    -10.1037
>hg19_chr9_100273500_100273596_reg1000903.p2_15.004990099_+     11      31      +       CTCF    CAGCTGACATGTTATTTCTA    -10.7539
...


Each line is designated to show the DWT score for each site.  This information is separated by TAB.  First column is the
sequence IDs as in the input FASTA file,  the next two columns indicate the start and the end of the site within the DNA
sequence. It follows by the strand information: + for forward (positive) strand and - for reverse (negative) strand. The
name of the TF, which is obtained from the  first line of the DWT flat file,  the sequence of the site,  and finally the
DWT score. The DWT score is calculated according the the Log(P(s|DWT) / P(s|BG)),  which is the log-likelihood  ratio of
the sequence being generated under the DWT model or a background model.  In this work we use the order zero Markov Chain
model as the background model, i.e., the probability of each nucleotide is independent from its adjacent position.



3. Input/Output for calculating posterior of dependency
In this section we describe the input parameter (argument) that are required for running the program for calculating po-
sterior of positional dependency between evey pairs of binding positions. The program is called:

'positional_dependency_posterior'

which is assumed to be properly compiled and placed under the 'Source' directory. Bellow shows an example of running the
program:

/Source/positional_dependency_posterior CTCF.dwt > CTCF.post

where the only input parameter is the DWT flat file.  Note also that the output is redirected into another file,  called
CTCF.post at the current working directory. Section '2.1. DWT flat file' in this document describes the DWT flat file.


3.1. Posterior of dependency output
The output of the program is printed on the screen, which can be redirected into a file. See example in the previous se-
ction. Bellow shows the first 10 lines of the output:

0     1   0.9671
0     2   0.0089
1     2   0.0347
0     3   0.0498
1     3   0.0493
2     3   0.0535
0     4   0.0268
1     4   0.0223
2     4   0.0991
3     4   0.1046


The first two columns indicate the pairs of the positions,  regardless of their order.  The last column is the posterior
probability of the positional dependency between the  positions. For instance, positions (0,1) are highly dependent with
a posterior 0.9671, and positions (2,4) are most likely independent from each other with a posterior of 0.0991.



4. Prerequisites for running 'diLogo.py'
Before running the diLogo.py script, it is required that the following programs or libraries are being installed:
       - Python 2.7
       - Pip (Python Package Management system)

After having these programs installed,  Pip can be used to install a compatible version (0.12.1) of the Pyx library. Pyx
is a graphical library for working with SVG, PDF and PostScript files. To install the Pyx library, execute the following
command in the command line:

pip install pyx==0.12.1

In addition to Pyx library, it is also required to install 'argparse' library, if it is not already installed.

pip install argparse


4.1. Input arguments for 'diLogo.py'
In this section we describe the input parameters (arguments) that are needed for generating diLogos using diLogo.py scr-
ipt. Below shows an example of how to run the program:

/usr/local/bin/python Source/diLogo.py  --help

By running this code, information about the input arguments will be appeared in the screen.
This includes:
i) Mandatory option -i for the input DWT flat file  (see section '2.1. DWT flat file')
ii) Mandatory option -p that contains the posteriors of dependencies between all pairs of positions (see section '3.1.
    Posterior of dependency output')
iii) Cutoff -c (optional) which specifies the minimum cutoff for which a pairs  of positions are taken as dependent. The
     value must be in a range [0, 1]. If not provided, by default a cutoff of 0.9 is used.
iv) Output directory -o which is for providing the name of the output directory.  If not given, the final result will be
    copied in the current working directory.


4.2. Output of 'diLogo.py'
If the running of the script was successful, then the resulting diLogo will be generated in the specified output direct-
ory (or the current working directory if option -o was not used). The resulted diLogo is in PDF format with the same na-
me as the name of the TF in the input DWT flat file.



5. Generating DWT flat file from a set of k-mers
A Python script is provided that generates a DWT flat file from a set of k-mers. The script is called:
'generate_DWT_model.py'
and can be found in the 'Source' directory. It is required to install first Numpy, if it is not already installed.
To install the Numpy library, simply run (given that pip is installed):

pip install numpy

After Numpy has been successfully installed, the script for generating DWT flat files can be run as it is shown bellow:

/usr/local/bin/python generate_DWT_model.py  --help


This provides a description of how to run the script.  Input file, given by -i option,  is a file that contains a set of
k-mers at each line. Optionally, these k-mers can have a weight value in the second column. But if weights are not given
they will all get the same weight 1. Bellow shows an example of such file:

GCGCCACCTGCAGGCCAAGG    0.9997
TGGCCTGCAGGTGGCGCTGT    0.9999
GCACCACCTGCAGGCCAAGG    0.9989
CTGCCAGCAGATGGCGACAG    0.9996
TCGCCATCTGCTGGCAGCGC    0.9992
AGCGCACTGGCAGCCAGCAA    0.8333
CTGCCCTCTGGTGGCCGTAG    0.9999
CGGCCACCAGAGGGCAGTGT    1.0000
AGGCCATCTACAGGACTGCA    0.8264
CTGTCATCTACAGGCCATCT    0.9987
TGGCCTGTAGATGACAGCAG    0.9975
ATGACAGCAGAGGCCCATGC    0.5869
GTGCCACCTGGTGAATGACT    0.9934
CATTCACCAGGTGGCACCAC    0.9972
CGGCCACTGGGAGGCGCTGC    0.9997
...

A set of 20-mers are given that each has  a  different weight.  When running the script over a set of k-mers, a DWT flat
file will be printed out in the screen. The output can be re-directed to another file.  See 'Examples' directory to find
examples on running the script.
For more example, see 'Examples/diLogo/'.



6. Fitting a DWT model from an initial PSWM model
Here we are presenting a program that can be used to fit a DWT model to a set of DNA sequences. Given a set of DNA sequ-
ences and a PSWM (or WM) file, the 'fitting_DWT_model.py' to be found in 'Source' directory, fits a DWT model via an it-
erative scheme. The DNA sequences can be of various lengths. For instance, a set of peaks from a ChIP-seq data. The PSWM
file needs to follow a certain format (see section '6.2.1. PSWM format').  The final output of the program is a DWT flat
file, posterior of positional dependencies for all pairs of positions,  a diLogo in PDF format for the final DWT, and  a
set of predicted TF binding sites.


6.1. Prerequisites for running 'fitting_DWT_model.py'
Before running the program, there are several prerequisites which must be installed. The program is implemented in Pyth-
on. Hence, first, there are these requirements:
    - Python 2.7
    - argparse library for Python

The 'fitting_DWT_model.py' calls several programs from the current toolbox.  As a result, user needs to properly install
these tools. This includes:
    - 'DWT_TFBS_prediction' (see compiling guide in 'section 1. Compiling the source codes')
    - 'positional_dependency_posterior' (see compiling guide in 'section 1. Compiling the source codes')
    - 'diLogo.py' (see 'section 4. Prerequisites for running 'diLogo.py'')
    -  motevo (see compiling guide in 'section 1. Compiling the source codes')



6.1.1. Installing MotEvo
MotEvo is a general program for predicting and analyzing TF binding sites. For documentations on MotEvo see the main pa-
per:

MotEvo:integrated Bayesian probabilistic methods for inferring regulatory sites and motifs on multiple alignments of DNA
sequences. Bioinformatics. 2012 Feb 15;28(4):487-94

For more information on running MotEvo, we have also copied the MotEvo's manual in the 'Source' directory, which is cal-
led 'motevo_manual.txt'.

Section '1. Compiling the source codes' describes installing compiling all the programs,  including MotEvo.  However, if
it is preferred to install the MotEvo manually, the following commands can be executed in the terminal:

cd Source
g++ -O2 motevo.c -o motevo

This will produce the MotEvo' executable in the 'Source' directory.
Note that here we are using MotEvo version 1.03.



6.2. Running 'fitting_DWT_model.py'
Assuming that all the dependencies are installed and in place for running the program, here we  show how to  perform the
fitting of a DWT model to a set of DNA sequences. In general, one can run the program in the command-line as bellow:

/usr/local/bin/python fitting_DWT_model.py --help

That will give some information on the way of running the program and its input arguments. We are now first focus on mo-
st import arguments: PSWM file and DNA FASTA file. Afterwards, we explain other optional input arguments.


6.2.1. PSWM format (-w option)
The the PSWM format that both MotEvo and fitting_DWT_model.py use as input are provided in a TRANSFAC-like format. Below
is an example of a single WM:

//
NA name_of_TF
PO      A       C       G       T
1       0       0       0       10
2       0       0       0       10
3       0       0       0       10
4       0       4       6       0
5       0       2       8       0
//

This PSWM has length 5.  The counts on  each line indicate the number of known sites for the motif that have an A, C, G,
and T at this position respectively. As example of the PSWM file, see BHLHE.wm or CEBPB.wm in the 'Examples/DWT_fitting'
directory.



6.2.2. DNA FASTA file (-f option)
The DNA sequences need to be provided in FASTA format. For that, each sequence entails two lines of the file.  The first
line contain the sequence ID proceeded with a double > sign (>>),  and the second line the actual DNA sequence.  The DNA
should not have a gap or other special characters like new-line (\n). Below, shows an example of a DNA FASTA file:

>>hg19_chr3_128444844_128444965_reg1000954.p1_117.232238095_+
ATGGGGACAACCATTTGGGGGCAGACATGTTTGTAGCACGAGATCCAGGCTCAGTCCCGAGGCAGCCGGAACGTGACGCAAGGTTGAGGCGGGGCCCGCACCCTGGCGTCGAGCG
>>hg19_chr9_97488904_97489022_reg1000706.p2_145.265719626_+
TAGCGGAAGGCGGGTCAGGCAGAATGCGGCCCCGGGCGCGTGTGGATGACGTCACCCGGCGCGTGCCGGGGTAGCCCGTAGTAACCCCGAGTCTGCGGAAGTGGTGACCCGTGGGACGC
>>hg19_chr16_87421706_87421832_reg1000553.p1_179.231594595_+
GGAACCTCAGCCCGTTCCACCTGGTGTTACACACTCATTTAGGAAACAGCTGCGGGTCGCGTGACTGATTTGTCAGTGCTTTACCACGCGTTCT
>>hg19_chr4_114683824_114683968_reg1000020.p3_206.659064789_+
CGATATTTCCCACTCTGGCGGTCAGGGGGAGGTAGTAGGAAGGCTGGGTGTCGGTCACGCGACCCGGCGGGGGCTGACGTCATTCACATCACGTAG
>>hg19_chr6_138187810_138187952_reg1000567.p1_116.899464968_+
GACCAAAGGCTGTCACCGCTGCTTTTTCTCGAAATGCCCGCCCGGGTCCTGTCTGGGGCTCCCGCCTACGCGCTCATCACGTGCACAGCCCAAACTTTTCA
>>hg19_chr13_31736068_31736209_reg1001036.p1_94.8717815534_+
CTTATGTATCGCACTGATCAGAACTTTCCAGAATCTGCGGCATTTACTCACCGGCGCCTCCACCGGCCCCTCCACGTG
>>hg19_chr9_130538750_130538850_reg1002579.p1_106.08503937_+
CTGGGGTGATACCATCTCCTGGTTTCTGCGGGGGTGTATGTGAGTTCCCTCCCCCTGCCCCCAGCTGTGGGACTGTCCCTTCTCACAGCCACCACCAACTG


In this example, we have seven DNA sequences each of which are represented  with a unique IDs.  Note that the ID strings
are started with >>, instead of a single >. This is because we are adopting the same formatting as in MotEvo.
For more information on the formatting, see 'Source/motevo_manual.txt'.



6.2.3. Other input arguments
Other input parameters are explained here.
    -o or --outdir: This option specifies a name of a directory that will be used to copy the output files. Although, u-
                    sing it is optional, it is highly recommended to use this option to avoid re-writting the files that
                    already exist. Note that the directory will be created, if it does not exist a priori.
    -b or --with_bg: Using this option tells the program to use the frequencies of nucleotides (bases) in the input DNA
                     sequences for setting the background frequencies. If it is not provided, a uniform background freq-
                     uences will be used for calculating the PSWM or DWT scores.
    -p or --min_post: At each round of  iteration,  the program selects a set of binding sites to build up the model for
                      the next round. By default,  we are selecting every binding  site that has a posterior probability
                      of at least 0.5. However, user can explicitly define the minimum posterior threshold by using this
                      option.
    -t or --tf: It gives the name of the TF. If not provided, the WM file name is used as the name of the TF.
    -v or --verbose: To print out some information, while running the program, on the screen.



6.3. Output files
After running the program sucesfully, a set of files will be generated and placed in the output directory (or the curre-
nt working directory if the option -o is not used). This mainly includes:
    - A DWT flat file, which has the 'dwt' extension.
    - A set of binding sites with the 'alg' extension.
    - Posterior of positional dependencies between all pairs of positions. This files has 'post' extension.
    - A diLogo for the DWT model in PDF format.
    - A directory named 'intermediate_results' that contains files that were produced during running the program.



7. Contact and credits
The DWT model is developed in C++ by Saeed Omidi and Erik van Nimwegen.
For citing our work, please check out our website:
http://nimwegenlab.org/

Source code repository:
https://github.com/omidi/DWT-model

email address:
saeed.omidi@gmail.com
erik.vannimwegen@unibas.ch

connecting to us on Twitter:
@NimwegenLab
@SaeedOmidi

Physical address:
Core program Computational and Systems Biology
Biozentrum, University of Basel
Klingelbergstrasse 50-70
4056 Basel, Switzerland